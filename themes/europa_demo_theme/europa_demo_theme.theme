<?php

/**
 * @file
 * Functions to support the Europa Demo sub-theme.
 */

declare(strict_types = 1);

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_menu__site_switcher().
 */
function europa_demo_theme_preprocess_menu__site_switcher(&$variables) {
  // Massage data to be compliant with ECL navigation menu data structure.
  $variables['links'] = [];
  foreach ($variables['items'] as $item) {
    $variables['links'][] = [
      'href' => $item['url'],
      'label' => $item['title'],
      'is_active' => $item['in_active_trail'],
    ];
  }
}

/**
 * Implements template_preprocess_rdf_entity() for the Department bundle.
 */
function europa_demo_theme_preprocess_rdf_entity__oe_department(&$variables) {
  /** @var \Drupal\rdf_entity\RdfInterface $entity */
  $entity = $variables['rdf_entity'];

  $variables['in_page_links'] = [];

  // Responsibilities.
  $variables['in_page_links'][] = [
    'href' => '#responsibilities',
    'label' => t('Responsibilities'),
  ];

  $variables['content']['oe_department_tasks_description'] = [
    '#type' => 'processed_text',
    '#text' => $entity->get('oe_department_tasks_description')->value,
    '#format' => $entity->get('oe_department_tasks_description')->format,
  ];

  // Announcements.
  $entity_type_manager = \Drupal::entityTypeManager();
  $terms = $entity_type_manager->getStorage('taxonomy_term')->loadByProperties(['name' => ['energy policy']]);
  $ids = array_keys($terms);
  $ids = $entity_type_manager->getStorage('rdf_entity')->getQuery()
    ->condition('rid', 'oe_announcement')
    ->condition('oe_announcement_subject', $ids, 'IN')
    ->execute();

  if ($ids) {
    $variables['in_page_links'][] = [
      'href' => '#announcements',
      'label' => t('News'),
    ];

    // Use list item block pattern to render announcement list.
    // We set a custom pattern context so that we can get advantage of theme
    // suggestions and preprocess set via hook_ui_patterns_suggestions_alter().
    // @see europa_demo_core_ui_patterns_suggestions_alter()
    // @see europa_demo_theme_preprocess_pattern_list_item_block_one_column__entity_list__rdf_entity__announcement()
    $variables['announcements'] = [
      '#type' => 'pattern',
      '#id' => 'list_item_block_one_column',
      '#context' => [
        'type' => 'entity_list',
        'entity_type' => 'rdf_entity',
        'bundle' => 'announcement',
        'entities' => $entity_type_manager->getStorage('rdf_entity')->loadMultiple($ids),
      ],
    ];

    if (!$entity->get('oe_department_links')->isEmpty()) {
      $link = $entity->get('oe_department_links')->first();
      $variables['announcements']['#button_label'] = t('All news');
      $variables['announcements']['#button_url'] = $link->uri;
    }
  }
}

/**
 * Implements template_preprocess_rdf_entity() for the Announcement bundle.
 */
function europa_demo_theme_preprocess_rdf_entity__oe_announcement(&$variables) {
  /** @var \Drupal\rdf_entity\RdfInterface $entity */
  $entity = $variables['rdf_entity'];

  // Body.
  $variables['content']['oe_announcement_body'] = [
    '#type' => 'processed_text',
    '#text' => $entity->get('oe_announcement_body')->value,
    '#format' => $entity->get('oe_announcement_body')->format,
  ];

  // Subject.
  /** @var \Drupal\taxonomy\TermInterface[] $subjects */
  $subjects = $entity->get('oe_announcement_subject')->referencedEntities();
  $labels = [];
  foreach ($subjects as $subject) {
    $labels[] = $subject->label();
  }

  $variables['content']['oe_announcement_subject'] = [
    '#theme' => 'item_list',
    '#items' => $labels,
    '#attributes' => ['class' => ['ecl-list', 'ecl-list--inline']],
  ];

  // Department.
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('rdf_entity');
  $department = $entity->get('oe_announcement_department');
  $variables['department'] = $view_builder->viewField($department, ['type' => 'rdf_entity_reference_department_url', 'label' => 'hidden']);
}

/**
 * Implements template_preprocess_rdf_entity() for the Event bundle.
 */
function europa_demo_theme_preprocess_rdf_entity__oe_event(&$variables) {
  /** @var \Drupal\rdf_entity\RdfInterface $entity */
  $entity = $variables['rdf_entity'];

  // Description.
  $variables['content']['oe_event_description'] = [
    '#type' => 'processed_text',
    '#text' => $entity->get('oe_event_description')->value,
    '#format' => $entity->get('oe_event_description')->format,
  ];

  // Links.
  $variables['content']['oe_event_links'] = [];
  $links = [];
  if (!$entity->get('oe_event_links')->isEmpty()) {
    /** @var \Drupal\link\LinkItemInterface $link */
    $link = $entity->get('oe_event_links')->first();
    $url = $link->getUrl();
    $classes = $url->isExternal() ? ['ecl-link', 'ecl-link--external'] : [];
    $links[] = [
      '#type' => 'link',
      '#url' => $url,
      '#title' => $link->title,
      '#attributes' => ['class' => $classes],
    ];
  }

  if (!$entity->get('oe_event_website')->isEmpty()) {
    /** @var Drupal\Core\Url $url */
    $url = $entity->get('oe_event_website')->first()->getUrl();
    $classes = $url->isExternal() ? ['ecl-link', 'ecl-link--external'] : [];
    $links[] = [
      '#type' => 'link',
      '#url' => $url,
      '#title' => t('Website'),
      '#attributes' => ['class' => $classes],
    ];
  }

  if ($links) {
    $variables['content']['oe_event_links'] = [
      '#theme' => 'item_list',
      '#items' => $links,
      '#attributes' => ['class' => ['ecl-list', 'ecl-list--unstyled']],
    ];
  }

  // Subject.
  /** @var \Drupal\taxonomy\TermInterface[] $subjects */
  $subjects = $entity->get('oe_event_subject')->referencedEntities();
  $labels = [];
  foreach ($subjects as $subject) {
    $labels[] = $subject->label();
  }

  $variables['content']['oe_event_subject'] = [
    '#theme' => 'item_list',
    '#items' => $labels,
    '#attributes' => ['class' => ['ecl-list', 'ecl-list--inline']],
  ];

  // Flag for passed events.
  $now = new DrupalDateTime();
  $end = DrupalDateTime::createFromTimestamp($entity->get('oe_event_end_date')->value);
  $variables['passed'] = $now > $end;

  // Department.
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('rdf_entity');
  $department = $entity->get('oe_event_organiser');
  $variables['department'] = $view_builder->viewField($department, ['type' => 'rdf_entity_reference_department_url', 'label' => 'hidden']);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Renders announcements using the list item default pattern.
 */
function europa_demo_theme_preprocess_pattern_list_item_block_one_column__entity_list__rdf_entity__announcement(&$variables) {
  $variables['items'] = [];

  /** @var \Drupal\ui_patterns\Element\PatternContext $context */
  $context = $variables['context'];

  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  foreach ($context->getProperty('entities') as $entity) {
    $build = [
      '#type' => 'pattern',
      '#id' => 'list_item_default',
      '#fields' => [
        'url' => Url::fromUri($entity->id())->toString(),
        'title' => $entity->label(),
      ],
    ];

    $timestamp = $entity->get('oe_announcement_publish_date')->value;

    $build['#fields']['meta'] = [
      $entity->get('oe_announcement_type')->entity->label(),
      \Drupal::service('date.formatter')->format($timestamp, 'custom', 'F d, Y'),
      $entity->get('oe_announcement_department')->entity->label(),
    ];
    $build['#fields']['detail'] = [
      '#plain_text' => $entity->get('oe_announcement_introduction')->getString(),
    ];

    $variables['items'][] = $build;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Renders events using the list item date pattern.
 */
function europa_demo_theme_preprocess_pattern_list_item_block_one_column__entity_list__rdf_entity__event(&$variables) {
  $variables['items'] = [];

  /** @var \Drupal\ui_patterns\Element\PatternContext $context */
  $context = $variables['context'];

  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  foreach ($context->getProperty('entities') as $entity) {
    $build = [
      '#type' => 'pattern',
      '#id' => 'list_item_date',
      '#fields' => [
        'url' => Url::fromUri($entity->id())->toString(),
        'title' => $entity->label(),
      ],
    ];

    $build['#fields']['detail'] = [
      '#plain_text' => $entity->get('oe_event_introduction')->getString(),
    ];

    $event_date = DrupalDateTime::createFromTimestamp($entity->get('oe_event_start_date')->value);

    $date = [
      'day' => $event_date->format('d'),
      'month' => $event_date->format('M'),
      'week_day' => $event_date->format('D'),
      'year' => $event_date->format('Y'),
    ];

    $build['#fields'] += $date;

    $variables['items'][] = $build;
  }
}
